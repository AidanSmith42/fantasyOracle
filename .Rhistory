# Remove links
tweets.text <- gsub("http\\w+", "", tweets.text)
# Remove tabs
tweets.text <- gsub("[ |\t]{2,}", "", tweets.text)
# Remove blank spaces at the beginning
tweets.text <- gsub("^ ", "", tweets.text)
# Remove blank spaces at the end
tweets.text <- gsub(" $", "", tweets.text)
tweets.text <- gsub("\\s", "", tweets.text)
tweets.text <- gsub("\\...", "", tweets.text)
tweets.text <- gsub("tennessee", "", tweets.text)
tweets.text <- gsub("vols", "", tweets.text)
#create corpus
tweets.text.corpus <- Corpus(VectorSource(tweets.text))
#clean up by removing stop words
tweets.text.corpus <- tm_map(tweets.text.corpus, function(x)removeWords(x,stopwords()))
str(tweets.text.corpus)
#generate wordcloud
wordcloud(tweets.text.corpus,min.freq = 2, scale=c(7.5,.25),colors=brewer.pal(8, "Dark2"),  random.color= TRUE, random.order = FALSE, max.words = 150)
t <- as.list(tweets.text.corpus)
head(t)
tweets <- searchTwitter("Tennessee Vols", n=500)
tweets.text <- sapply(tweets, function(x) x$getText())
#convert all text to lower case
tweets.text <- tolower(tweets.text)
# Replace blank space ("rt")
tweets.text <- gsub("rt", "", tweets.text)
# Replace @UserName
tweets.text <- gsub("@\\w+", "", tweets.text)
# Remove punctuation
tweets.text <- gsub("[[:punct:]]", "", tweets.text)
# Remove links
tweets.text <- gsub("http\\w+", "", tweets.text)
# Remove tabs
tweets.text <- gsub("[ |\t]{2,}", "", tweets.text)
# Remove blank spaces at the beginning
tweets.text <- gsub("^ ", "", tweets.text)
# Remove blank spaces at the end
tweets.text <- gsub(" $", "", tweets.text)
tweets.text <- gsub("\\'", "", tweets.text)
tweets.text <- gsub("\\...", "", tweets.text)
tweets.text <- gsub("tennessee", "", tweets.text)
tweets.text <- gsub("vols", "", tweets.text)
#create corpus
tweets.text.corpus <- Corpus(VectorSource(tweets.text))
#clean up by removing stop words
tweets.text.corpus <- tm_map(tweets.text.corpus, function(x)removeWords(x,stopwords()))
#generate wordcloud
wordcloud(tweets.text.corpus,min.freq = 2, scale=c(7.5,.25),colors=brewer.pal(8, "Dark2"),  random.color= TRUE, random.order = FALSE, max.words = 150)
t <- as.list(tweets.text.corpus)
head(t)
tweets <- searchTwitter("Tennessee Vols", n=500)
tweets.text <- sapply(tweets, function(x) x$getText())
#convert all text to lower case
tweets.text <- tolower(tweets.text)
# Replace blank space ("rt")
tweets.text <- gsub("rt", "", tweets.text)
# Replace @UserName
tweets.text <- gsub("@\\w+", "", tweets.text)
# Remove punctuation
tweets.text <- gsub("[[:punct:]]", "", tweets.text)
# Remove links
tweets.text <- gsub("http\\w+", "", tweets.text)
# Remove tabs
tweets.text <- gsub("[ |\t]{2,}", "", tweets.text)
# Remove blank spaces at the beginning
tweets.text <- gsub("^ ", "", tweets.text)
# Remove blank spaces at the end
tweets.text <- gsub(" $", "", tweets.text)
tweets.text <- gsub("\\'", "", tweets.text)
tweets.text <- gsub('\\"', "", tweets.text)
tweets.text <- gsub("\\...", "", tweets.text)
tweets.text <- gsub("tennessee", "", tweets.text)
tweets.text <- gsub("vols", "", tweets.text)
#create corpus
tweets.text.corpus <- Corpus(VectorSource(tweets.text))
#clean up by removing stop words
tweets.text.corpus <- tm_map(tweets.text.corpus, function(x)removeWords(x,stopwords()))
#generate wordcloud
wordcloud(tweets.text.corpus,min.freq = 2, scale=c(7.5,.25),colors=brewer.pal(8, "Dark2"),  random.color= TRUE, random.order = FALSE, max.words = 150)
t <- as.list(tweets.text.corpus)
head(t)
test <- "this string ..."
gsub("\\...", "", test)
str(tweets)
tweets$getText()
head(tweets.text)
head(tweets)
install.packages('rtweet')
library(rtweet)
tmls <- get_timelines("realdonaldtrump", n = 5)
tmls <- get_timeline("realdonaldtrump", n = 5)
get_timeline()
get_timeline(user='realdonalttrump', n=5)
get_timeline(user='realdonalttrump', n=5)
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
## install dev version of rtweet from github
remotes::install_github("mkearney/rtweet")
## load rtweet package
library(rtweet)
tmls <- get_timelines(c("cnn", "BBCWorld", "foxnews"), n = 200)
interactive()
vignette("auth", package = "rtweet")
get_token()
Consumer_key<- "uBlcXLr7cCvVjYw6HV9SgWn1Q"
Consumer_secret <- "qbUEb1KVqCH6hwUIrAlTnWolEKJWi3GtwkgtCS50lPsRuWCr9C"
access_token <- "1027404408739581953-QjAKaSQ5Ta6omVhHjqxfZ5yeTcVSlH"
access_token_secret <- "cwa8pGma1PFWIB5bXZi7bFIDK3qFEaJEPc4oA7DVQDW3K"
create_token(consumer_key = Consumer_key, consumer_secret = Consumer_secret, access_token = access_token, access_secret = access_token_secret)
tmls <- get_timelines(c("cnn", "BBCWorld", "foxnews"), n = 200)
tmls
library(rlang)
install.packages('rlang')
library(rlang)
tmls <- get_timeline('realDonaldTrump', n = 200)
tmls
View(tmls)
tmls <- get_timeline('realDonaldTrump', n = 10000) %>% select(text)
library(dplyr)
tmls <- get_timeline('realDonaldTrump', n = 10000) %>% select(text)
grep('http', tmls[4])
grep('http', tmls[[4])
grep('http', tmls[[4]])
tmls[4]
grep('http', tmls$text[4])
gsub('http\S+', '', tmls$text[4])
gsub('http?*', '', tmls$text[4])
gsub(" ?(f|ht)tp(s?)://(.*)[.][a-z]+", "", tmls$text[4])
gsub(" ?(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", "", tmls$text[4])
tmls$text <- gsub(" ?(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", "", tmls$text)
na.omit(tmls)
str(tmls)
tmls <- na.omit(tmls)
str(tmls)
library(jsonlite)
data <- toJSON(tmls)
head(data)
View(data)
write_json(data, "tweets")
fwrite(tmls$text, "test.txt")
library(data.table)
fwrite(tmls$text, "test.txt")
fwrite(tmls, "test.txt")
tmls <- get_timeline("realdonaldtrump", n = 50000)
tmls$text <- gsub(" ?(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", "", tmls$text)
tmls <- na.omit(tmls)
head(tmls)
tmls <- get_timeline("realdonaldtrump", n = 500000) %>% select(text)
tmls$text <- gsub(" ?(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", "", tmls$text)
tmls <- na.omit(tmls)
tmls <- get_timeline("realdonaldtrump", n = 10000) %>% select(text)
tmls$text <- gsub(" ?(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", "", tmls$text)
tmls <- na.omit(tmls)
tmls <- get_timeline("realdonaldtrump", n = 100000, retryonratelimit = TRUE) %>% select(text)
tmls$text <- gsub(" ?(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", "", tmls$text)
tmls <- na.omit(tmls)
fwrite(tmls, "test.txt")
shiny::runApp('R/code/fantasy')
runApp('R/code/fantasy')
deployApp()
library(rsconnect)
deployApp()
shiny::runApp('R/code/fantasy')
shiny::runApp()
runApp()
x
x <- x[1:39, -2]
x$V3 <- as.character(x$V3)
if(input$Position=="DEF"){
for(i in 1:32){
st <- gregexpr('\\(', x$V3[[i]])
st <- as.numeric(st)
x$V3[i] <- substr(x$V3[[i]], (st+1), (st+3))
}
}else{
for(i in 1:39){
s <- strsplit(x$V3[[i]], " ")
s <- unlist(s)
Name<- paste0(s[1]," ", s[3], " ", s[4])
team<- trimws(substr(Name, (nchar(Name)-3), nchar(Name)))
if(nchar(team) > 3){
s <- strsplit(team, " ")
s <- unlist(s)
x$Team[i] <- s[2]
}
else x$Team[i] <- team
x$V3[i]<- trimws(substr(Name, 1, (nchar(Name)-3)))
}
}
runApp()
x
##BREAK---CHANGE HERE
x <- na.omit(x)
x
s<- read.csv("Data2.csv")
p<-ggplot(s,
aes(ordering, group = Player,color=Player,fill=Player)) +
geom_tile(aes(y = TotalPts/2,
height = TotalPts,
width = 0.9), alpha = 0.9) +
# text on top of bars
geom_text(aes(y = TotalPts, label = Player), hjust = -0.1) +
#text in x-axis (requires clip = "off" in coord_cartesian)
#geom_text(aes(y = 0, label = Player), hjust = 0.1) +
coord_flip(clip = "off", expand = FALSE) +
scale_color_viridis_d(name="")+
scale_fill_viridis_d(name="")+
#xlim(0,400)+
scale_y_continuous(name ="Total Fantasy Points(2018)",limits=c(0,450))  +
theme_tufte(14,"Avenir")+
guides(color=F,fill=F)+
labs(title='Week: {frame_time}', x = "",y="Total Fantasy Points(2018)") +
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_time(Week)+
ease_aes('cubic-in-out')
library(ggplot2)
p<-ggplot(s,
aes(ordering, group = Player,color=Player,fill=Player)) +
geom_tile(aes(y = TotalPts/2,
height = TotalPts,
width = 0.9), alpha = 0.9) +
# text on top of bars
geom_text(aes(y = TotalPts, label = Player), hjust = -0.1) +
#text in x-axis (requires clip = "off" in coord_cartesian)
#geom_text(aes(y = 0, label = Player), hjust = 0.1) +
coord_flip(clip = "off", expand = FALSE) +
scale_color_viridis_d(name="")+
scale_fill_viridis_d(name="")+
#xlim(0,400)+
scale_y_continuous(name ="Total Fantasy Points(2018)",limits=c(0,450))  +
theme_tufte(14,"Avenir")+
guides(color=F,fill=F)+
labs(title='Week: {frame_time}', x = "",y="Total Fantasy Points(2018)") +
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_time(Week)+
ease_aes('cubic-in-out')
library(ggthemes)
p<-ggplot(s,
aes(ordering, group = Player,color=Player,fill=Player)) +
geom_tile(aes(y = TotalPts/2,
height = TotalPts,
width = 0.9), alpha = 0.9) +
# text on top of bars
geom_text(aes(y = TotalPts, label = Player), hjust = -0.1) +
#text in x-axis (requires clip = "off" in coord_cartesian)
#geom_text(aes(y = 0, label = Player), hjust = 0.1) +
coord_flip(clip = "off", expand = FALSE) +
scale_color_viridis_d(name="")+
scale_fill_viridis_d(name="")+
#xlim(0,400)+
scale_y_continuous(name ="Total Fantasy Points(2018)",limits=c(0,450))  +
theme_tufte(14,"Avenir")+
guides(color=F,fill=F)+
labs(title='Week: {frame_time}', x = "",y="Total Fantasy Points(2018)") +
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_time(Week)+
ease_aes('cubic-in-out')
library(gganimate)
p<-ggplot(s,
aes(ordering, group = Player,color=Player,fill=Player)) +
geom_tile(aes(y = TotalPts/2,
height = TotalPts,
width = 0.9), alpha = 0.9) +
# text on top of bars
geom_text(aes(y = TotalPts, label = Player), hjust = -0.1) +
#text in x-axis (requires clip = "off" in coord_cartesian)
#geom_text(aes(y = 0, label = Player), hjust = 0.1) +
coord_flip(clip = "off", expand = FALSE) +
scale_color_viridis_d(name="")+
scale_fill_viridis_d(name="")+
#xlim(0,400)+
scale_y_continuous(name ="Total Fantasy Points(2018)",limits=c(0,450))  +
theme_tufte(14,"Avenir")+
guides(color=F,fill=F)+
labs(title='Week: {frame_time}', x = "",y="Total Fantasy Points(2018)") +
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_time(Week)+
ease_aes('cubic-in-out')
animate(p, nframes = 180, width=1300,fps = 10, end_pause = 20) #again, use anim_save(filename) to save
p
View(s)
str(s)
for(i in 1:6){
j <- 0
while(j<200){
P <- paste0("https://www.pro-football-reference.com/play-index/pgl_finder.cgi?request=1&match=game&year_min=2019&year_max=2020&season_start=1&season_end=-1&pos%5B%5D=WR&pos%5B%5D=RB&pos%5B%5D=TE&is_starter=E&game_type=R&career_game_num_min=1&career_game_num_max=400&qb_start_num_min=1&qb_start_num_max=400&game_num_min=0&game_num_max=99&week_num_min=",
i,"&week_num_max=",i,
"&c5val=1.0&order_by=fantasy_points_ppr&offset=",j)
print(P)
j <- j+100
r <-getURL(P)
tables <- readHTMLTable(r)
tables <- list.clean(tables, fun = is.null, recursive=F)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
x <- tables[[which.max(n.rows)]]
if(i==1){final <- x}
else final <- rbind(final,x)
}
}
final$Rk <- as.numeric(as.character(final$Rk))
final <- na.omit(final)
final$PPR <- as.numeric(as.character(final$PPR))
final$`G#` <- as.numeric(as.character(final$`G#`))
DT <- data.table(final)
library(data.table)
load("~/R/code/fantasy/.RData")
library(DT)
library(rlist)
library(XML)
for(i in 1:6){
j <- 0
while(j<200){
P <- paste0("https://www.pro-football-reference.com/play-index/pgl_finder.cgi?request=1&match=game&year_min=2019&year_max=2020&season_start=1&season_end=-1&pos%5B%5D=WR&pos%5B%5D=RB&pos%5B%5D=TE&is_starter=E&game_type=R&career_game_num_min=1&career_game_num_max=400&qb_start_num_min=1&qb_start_num_max=400&game_num_min=0&game_num_max=99&week_num_min=",
i,"&week_num_max=",i,
"&c5val=1.0&order_by=fantasy_points_ppr&offset=",j)
print(P)
j <- j+100
r <-getURL(P)
tables <- readHTMLTable(r)
tables <- list.clean(tables, fun = is.null, recursive=F)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
x <- tables[[which.max(n.rows)]]
if(i==1){final <- x}
else final <- rbind(final,x)
}
}
final$Rk <- as.numeric(as.character(final$Rk))
final <- na.omit(final)
final$PPR <- as.numeric(as.character(final$PPR))
final$`G#` <- as.numeric(as.character(final$`G#`))
DT <- data.table(final)
library(stringr)
library(XML)
library(rlist)
library(RCurl)
for(i in 1:6){
j <- 0
while(j<200){
P <- paste0("https://www.pro-football-reference.com/play-index/pgl_finder.cgi?request=1&match=game&year_min=2019&year_max=2020&season_start=1&season_end=-1&pos%5B%5D=WR&pos%5B%5D=RB&pos%5B%5D=TE&is_starter=E&game_type=R&career_game_num_min=1&career_game_num_max=400&qb_start_num_min=1&qb_start_num_max=400&game_num_min=0&game_num_max=99&week_num_min=",
i,"&week_num_max=",i,
"&c5val=1.0&order_by=fantasy_points_ppr&offset=",j)
print(P)
j <- j+100
r <-getURL(P)
tables <- readHTMLTable(r)
tables <- list.clean(tables, fun = is.null, recursive=F)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
x <- tables[[which.max(n.rows)]]
if(i==1){final <- x}
else final <- rbind(final,x)
}
}
final$Rk <- as.numeric(as.character(final$Rk))
final <- na.omit(final)
final$PPR <- as.numeric(as.character(final$PPR))
final$`G#` <- as.numeric(as.character(final$`G#`))
DT <- data.table(final)
DT[is.na(DT)] <- 0
s <- data.frame("Player"=DT[,2],"G#" = DT[,11], "PPR"=DT[,15])
DT$Player <- as.factor(DT$Player)
DT <- as.data.table(DT)
DT <- DT[order(Wk)]
DT[, TotalPts := cumsum(PPR), by=c("Player")]
s <- filter(DT, TotalPts > 240)
u <- unique(s$Player)
u
DT[, TotalPts := cumsum(PPR), by=c("Player")]
s <- filter(DT, TotalPts > 240)
DT
s
s <- filter(DT, TotalPts > 240)
View(DT)
for(i in 1:17){
j <- 0
while(j<200){
P <- paste0("https://www.pro-football-reference.com/play-index/pgl_finder.cgi?request=1&match=game&year_min=2019&year_max=2020&season_start=1&season_end=-1&pos%5B%5D=WR&pos%5B%5D=RB&pos%5B%5D=TE&is_starter=E&game_type=R&career_game_num_min=1&career_game_num_max=400&qb_start_num_min=1&qb_start_num_max=400&game_num_min=0&game_num_max=99&week_num_min=",
i,"&week_num_max=",i,
"&c5val=1.0&order_by=fantasy_points_ppr&offset=",j)
print(P)
j <- j+100
r <-getURL(P)
tables <- readHTMLTable(r)
tables <- list.clean(tables, fun = is.null, recursive=F)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
x <- tables[[which.max(n.rows)]]
if(i==1){final <- x}
else final <- rbind(final,x)
}
}
final$Rk <- as.numeric(as.character(final$Rk))
final <- na.omit(final)
final$PPR <- as.numeric(as.character(final$PPR))
final$`G#` <- as.numeric(as.character(final$`G#`))
DT <- data.table(final)
DT[is.na(DT)] <- 0
s <- data.frame("Player"=DT[,2],"G#" = DT[,11], "PPR"=DT[,15])
DT$Player <- as.factor(DT$Player)
DT <- as.data.table(DT)
DT <- DT[order(Wk)]
DT[, TotalPts := cumsum(PPR), by=c("Player")]
View(DT)
s <- filter(DT, TotalPts > 240)
DT %>% filter(TotalPts > 240)
str(DT)
DT %>% filter(DT$TotalPts > 240)
DT <- as.data.frame(DT)
DT2 <- DT %>% select(Player, `G#`, TotalPts)
library(dplyr)
DT2 <- DT %>% select(Player, `G#`, TotalPts)
DT[, TotalPts := cumsum(PPR), by=c("Player")]
DT <- data.table(final)
s <- DT[Player %in% u]
Q <- data.frame(Player = rep(u,16), Wk=rep(1:16, each=length(u)), Pts2=0)
s <- data.frame("Player"=s[,2],"Wk" = s[,11], "PPR"=s[,15])
Q$Player <- as.character(Q$Player)
s$Player <- as.character(s$Player)
names(s) <- c("Player", "Wk", "PPR")
DT <- full_join(s,Q)
DT[is.na(DT)] <- 0
s <- data.frame("Player"=DT[,2],"G#" = DT[,11], "PPR"=DT[,15])
Q$Player <- as.character(Q$Player)
s$Player <- as.character(s$Player)
names(s) <- c("Player", "Wk", "PPR")
DT <- full_join(s,Q)
DT[is.na(DT)] <- 0
s <- data.frame("Player"=DT[,2],"G#" = DT[,11], "PPR"=DT[,15])
DT$Player <- as.factor(DT$Player)
DT <- as.data.table(DT)
DT <- DT[order(Wk)]
DT[, TotalPts := cumsum(PPR), by=c("Player")]
s <- filter(DT, TotalPts > 240)
u <- unique(s$Player)
u
s <- DT[Player %in% u]
s <- filter(DT, TotalPts > 240)
View(s)
s <- filter(s, Week< 16)
str(s)
#s <- s[Player %in% u]
names(s) <- c("Player", "Week", "Pts", "Pts2", "TotalPts")
s <- filter(s, Week< 16)
s <- s  %>% group_by(Week) %>% mutate(ordering = rank(TotalPts)) %>% ungroup()
s$Week <- as.integer(s$Week)
p<-ggplot(s,
aes(ordering, group = Player,color=Player,fill=Player)) +
geom_tile(aes(y = TotalPts/2,
height = TotalPts,
width = 0.9), alpha = 0.9) +
# text on top of bars
geom_text(aes(y = TotalPts, label = Player), hjust = -0.1) +
#text in x-axis (requires clip = "off" in coord_cartesian)
#geom_text(aes(y = 0, label = Player), hjust = 0.1) +
coord_flip(clip = "off", expand = FALSE) +
scale_color_viridis_d(name="")+
scale_fill_viridis_d(name="")+
#xlim(0,400)+
scale_y_continuous(name ="Total Fantasy Points(2018)",limits=c(0,450))  +
theme_tufte(14,"Avenir")+
guides(color=F,fill=F)+
labs(title='Week: {frame_time}', x = "",y="Total Fantasy Points(2018)") +
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_time(Week)+
ease_aes('cubic-in-out')
animate(p, nframes = 180, width=1300,fps = 10, end_pause = 20) #again, use anim_save(filename) to save
View(s)
# u <- as.vector(u)
s <- DT
s <- as.data.table(s)
s$Player <- as.character(s$Player)
s <- s[Player %in% u]
s
names(s) <- c("Player", "Week", "Pts", "Pts2", "TotalPts")
s <- filter(s, Week< 16)
s <- s  %>% group_by(Week) %>% mutate(ordering = rank(TotalPts)) %>% ungroup()
s$Week <- as.integer(s$Week)
View(s)
p<-ggplot(s,
aes(ordering, group = Player,color=Player,fill=Player)) +
geom_tile(aes(y = TotalPts/2,
height = TotalPts,
width = 0.9), alpha = 0.9) +
# text on top of bars
geom_text(aes(y = TotalPts, label = Player), hjust = -0.1) +
#text in x-axis (requires clip = "off" in coord_cartesian)
#geom_text(aes(y = 0, label = Player), hjust = 0.1) +
coord_flip(clip = "off", expand = FALSE) +
scale_color_viridis_d(name="")+
scale_fill_viridis_d(name="")+
#xlim(0,400)+
scale_y_continuous(name ="Total Fantasy Points(2018)",limits=c(0,450))  +
theme_tufte(14,"Avenir")+
guides(color=F,fill=F)+
labs(title='Week: {frame_time}', x = "",y="Total Fantasy Points(2018)") +
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_time(Week)+
ease_aes('cubic-in-out')
animate(p, nframes = 180, width=1300,fps = 10, end_pause = 20) #again, use anim_save(filename) to save
fwrite(s, "FantasyData.csv")
